// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.FatGeoff;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftSide;
    public static SpeedController driveTrainRightSide;
    public static RobotDrive driveTrainRobotDrive21;
    public static SpeedController ballPickUpBallPickUpMotor;
    public static SpeedController ballShooterHopperMotor;
    public static CANTalon ballShooterBallShooterMotor;
    public static DigitalInput robotLifterLiftToLimit;
    public static SpeedController robotLifterLifterMoter;
    public static SpeedController gearGate;
    public static DigitalInput gearCounter;
    public static SpeedController leftSideLeftPaddle;
    public static DigitalInput leftSideLeftOut;
    public static DigitalInput leftSideLeftIn;
    public static SpeedController rightSideRightPaddle;
    public static DigitalInput rightSideRightOut;
    public static DigitalInput rightSideRightIn;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftSide = new Spark(5);
        LiveWindow.addActuator("DriveTrain", "LeftSide", (Spark) driveTrainLeftSide);
        
        driveTrainRightSide = new Spark(6);
        LiveWindow.addActuator("DriveTrain", "RightSide", (Spark) driveTrainRightSide);
        
        driveTrainRobotDrive21 = new RobotDrive(driveTrainLeftSide, driveTrainRightSide);
        
        driveTrainRobotDrive21.setSafetyEnabled(true);
        driveTrainRobotDrive21.setExpiration(0.1);
        driveTrainRobotDrive21.setSensitivity(0.5);
        driveTrainRobotDrive21.setMaxOutput(1.0);

        ballPickUpBallPickUpMotor = new Spark(1);
        LiveWindow.addActuator("BallPickUp", "BallPickUpMotor", (Spark) ballPickUpBallPickUpMotor);
        
        ballShooterHopperMotor = new Spark(0);
        LiveWindow.addActuator("BallShooter", "HopperMotor", (Spark) ballShooterHopperMotor);
        
        ballShooterBallShooterMotor = new CANTalon(1);
        LiveWindow.addActuator("BallShooter", "BallShooterMotor", ballShooterBallShooterMotor);
        
        robotLifterLiftToLimit = new DigitalInput(5);
        LiveWindow.addSensor("RobotLifter", "LiftToLimit", robotLifterLiftToLimit);
        
        robotLifterLifterMoter = new Spark(3);
        LiveWindow.addActuator("RobotLifter", "LifterMoter", (Spark) robotLifterLifterMoter);
        
        gearGate = new Spark(2);
        LiveWindow.addActuator("Gear", "Gate", (Spark) gearGate);
        
        gearCounter = new DigitalInput(0);
        LiveWindow.addSensor("Gear", "Counter", gearCounter);
        
        leftSideLeftPaddle = new Spark(4);
        LiveWindow.addActuator("LeftSide", "LeftPaddle", (Spark) leftSideLeftPaddle);
        
        leftSideLeftOut = new DigitalInput(1);
        LiveWindow.addSensor("LeftSide", "LeftOut", leftSideLeftOut);
        
        leftSideLeftIn = new DigitalInput(3);
        LiveWindow.addSensor("LeftSide", "LeftIn", leftSideLeftIn);
        
        rightSideRightPaddle = new Spark(9);
        LiveWindow.addActuator("RightSide", "RightPaddle", (Spark) rightSideRightPaddle);
        
        rightSideRightOut = new DigitalInput(2);
        LiveWindow.addSensor("RightSide", "RightOut", rightSideRightOut);
        
        rightSideRightIn = new DigitalInput(4);
        LiveWindow.addSensor("RightSide", "RightIn", rightSideRightIn);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
