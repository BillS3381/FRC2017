// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.FatGeoff.subsystems;

import org.usfirst.frc3381.FatGeoff.RobotMap;
import org.usfirst.frc3381.FatGeoff.commands.*;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import java.lang.Math;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Gear extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController gate = RobotMap.gearGate;
    private final DigitalInput counter = RobotMap.gearCounter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double gateSpeed = 0;
    public double gateAngle = 0;
    public boolean on = true;
    public int counts = 0;
    public int toggle = 1;
    public boolean done = false;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void setGate(double speed) {gate.set(speed);}
    public void setGate() {gate.set(gateSpeed);}
    public void stop() {gate.set(0);}
    public void gateData(double speed, double angle) {
    	gateAngle = angle;
    	gateSpeed = speed;
    }
    public void parseCounts() {
    	if(on != counter.get()) {
    		on = counter.get();
    		counts++;
    		counts = java.lang.Math.abs(counts) * toggle;
    	}
    	if(java.lang.Math.abs(counts * 1.02857) >= gateAngle) {
    		stop();
    		done = true;
    	}
    }
    public void countReset() {counts = 0;}
}

