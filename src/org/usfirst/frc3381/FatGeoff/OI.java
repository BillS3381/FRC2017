// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.FatGeoff;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3381.FatGeoff.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton hopperSpin;
    public JoystickButton reverse;
    public JoystickButton up;
    public JoystickButton hopperSpinBack;
    public JoystickButton openGear;
    public JoystickButton pinchGear;
    public JoystickButton gate;
    public Joystick joystick;
    public JoystickButton pickUp;
    public JoystickButton spitOut;
    public JoystickButton controlFlipButton;
    public Joystick joystick2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick2 = new Joystick(1);
        
        controlFlipButton = new JoystickButton(joystick2, 1);
        controlFlipButton.whileHeld(new ControlFlip());
        spitOut = new JoystickButton(joystick2, 4);
        spitOut.whileHeld(new CommandBallPickUpReverse());
        pickUp = new JoystickButton(joystick2, 3);
        pickUp.whileHeld(new CommandBallPickUpForward());
        joystick = new Joystick(0);
        
        gate = new JoystickButton(joystick, 10);
        gate.whenPressed(new GateToggle());
        pinchGear = new JoystickButton(joystick, 12);
        pinchGear.whileHeld(new Pinch());
        openGear = new JoystickButton(joystick, 11);
        openGear.whileHeld(new Open());
        hopperSpinBack = new JoystickButton(joystick, 1);
        hopperSpinBack.whileHeld(new CommandHopperBack());
        up = new JoystickButton(joystick, 5);
        up.whileHeld(new CommandLifterUp());
        reverse = new JoystickButton(joystick, 6);
        reverse.whileHeld(new CommandLifterDown());
        hopperSpin = new JoystickButton(joystick, 2);
        hopperSpin.whileHeld(new CommandHopper());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("CommandDrive", new CommandDrive());
        SmartDashboard.putData("CommandHopper", new CommandHopper());
        SmartDashboard.putData("CommandBallPickUpForward", new CommandBallPickUpForward());
        SmartDashboard.putData("CommandBallPickUpReverse", new CommandBallPickUpReverse());
        SmartDashboard.putData("CommandBallShooter", new CommandBallShooter());
        SmartDashboard.putData("CommandLifterUp", new CommandLifterUp());
        SmartDashboard.putData("CommandLiftToLimit", new CommandLiftToLimit());
        SmartDashboard.putData("CommandLifterDown", new CommandLifterDown());
        SmartDashboard.putData("CommandHopperBack", new CommandHopperBack());
        SmartDashboard.putData("WaitForButton", new WaitForButton());
        SmartDashboard.putData("PinchLeft", new PinchLeft());
        SmartDashboard.putData("PinchRight", new PinchRight());
        SmartDashboard.putData("OpenLeft", new OpenLeft());
        SmartDashboard.putData("OpenRight", new OpenRight());
        SmartDashboard.putData("OpenGate: 0.65", new OpenGate(0.65));
        SmartDashboard.putData("CloseGate: 0.65", new CloseGate(.65));
        SmartDashboard.putData("Pinch", new Pinch());
        SmartDashboard.putData("Open", new Open());
        SmartDashboard.putData("GearGroup", new GearGroup());
        SmartDashboard.putData("ControlFlip", new ControlFlip());
        SmartDashboard.putData("GateToggle", new GateToggle());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

